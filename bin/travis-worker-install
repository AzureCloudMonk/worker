#!/usr/bin/env bash

set -o errexit

main() {
  export DEBIAN_FRONTEND=noninteractive

  if [[ $# = 0 ]] ; then
    echo 'No arguments provided, installing with'
    echo 'default configuration values.'
  fi

  while [ $# -gt 0 ]; do
    case "$1" in
      --aws=*) export AWS="${1#*=}" ;;
      --docker[-_]apt[-_]file=*) export DOCKER_APT_FILE="${1#*=}" ;;
      --docker[-_]cmd=*) export DOCKER_CMD="${1#*=}" ;;
      --docker[-_]config[-_]file=*) export DOCKER_CONFIG_FILE="${1#*=}" ;;
      --docker[-_]image[-_]language[-_]mappings=*) export DOCKER_IMAGE_LANGUAGE_MAPPINGS="${1#*=}" ;;
      --docker[-_]image[-_]languages=*) export DOCKER_IMAGE_LANGUAGES="${1#*=}" ;;
      --docker[-_]version=*) export DOCKER_VERSION="${1#*=}" ;;
      --packagecloud[-_]source=*) export PACKAGECLOUD_SOURCE="${1#*=}" ;;
      --skip[-_]docker[-_]populate=*) export SKIP_DOCKER_POPULATE="${1#*=}" ;;
      --trace) set -o xtrace ;;
      --travis[-_]enterprise[-_]build[-_]endpoint=*) export TRAVIS_ENTERPRISE_BUILD_ENDPOINT="${1#*=}" ;;
      --travis[-_]enterprise[-_]config=*) export TRAVIS_ENTERPRISE_CONFIG="${1#*=}" ;;
      --travis[-_]enterprise[-_]host=*) export TRAVIS_ENTERPRISE_HOST="${1#*=}" ;;
      --travis[-_]enterprise[-_]security[-_]token=*) export TRAVIS_ENTERPRISE_SECURITY_TOKEN="${1#*=}" ;;
      --travis[-_]queue[-_]name=*) export TRAVIS_QUEUE_NAME="${1#*=}" ;;
      --travis[-_]worker[-_]version=*) export TRAVIS_WORKER_VERSION="${1#*=}" ;;
      -h|--help|help) __help ; exit 0 ;;
      *) echo "Error: Invalid argument '$1'" >&2 ; __help ; exit 1 ;;
    esac
    shift
  done

  : ${DOCKER_VERSION:=1.9.0}
  : ${AWS:=false}
  if [[ $AWS != false ]] ; then
    AWS=true
  fi
  export DOCKER_VERSION AWS

  __assert_trusty
  __assert_root
  __install_docker

  if [[ ! -n $SKIP_DOCKER_POPULATE ]] ; then
    __pull_docker_images
  fi

  killall -9 travis-worker &>/dev/null || echo 'No travis-worker processes found'
  stop travis-worker &>/dev/null || echo 'No travis-worker service running'

  __install_travis_worker
  __configure_travis_worker
  __configure_grub

  start travis-worker

  echo 'Installation complete.'
  echo 'It is recommended that this host is restarted before running jobs through it'
}

__help() {
  cat <<EOF
Usage: travis-worker-install [options]

Bootstrap Ubuntu 14.04 host with docker and travis-worker installation.

OPTIONS:

  --aws - assume being installed on aws ec2 (default: true) [\$AWS]
  --docker-apt-file - name of APT source list for docker [\$DOCKER_APT_FILE]
  --docker-cmd - docker executable name (default: docker) [\$DOCKER_CMD]
  --docker-config-file - name of docker config file [\$DOCKER_CONFIG_FILE]
  --docker-image-language-mappings - mappings of languages to aliases for docker images [\$DOCKER_IMAGE_LANGUAGE_MAPPINGS]
  --docker-image-languages - travis-specific language docker images to pull [\$DOCKER_IMAGE_LANGUAGES]
  --docker-version - docker version to install (default: $DOCKER_VERSION) [\$DOCKER_VERSION]
  --packagecloud-source - name of source for travis-worker installation (default: travisci/worker) [\$PACKAGECLOUD_SOURCE]
  --skip-docker-populate - skip pulling docker images for jobs [\$SKIP_DOCKER_POPULATE]
  --trace - run with tracing
  --travis-enterprise-build-endpoint - full hostname of travis-build API [\$TRAVIS_ENTERPRISE_BUILD_ENDPOINT]
  --travis-enterprise-config - path to enterprise-specific config file [\$TRAVIS_ENTERPRISE_CONFIG]
  --travis-enterprise-host - hostname of enterprise platform (default: demo.enterprise.travis-ci.com) [\$TRAVIS_ENTERPRISE_HOST]
  --travis-enterprise-security-token - auth token for communicating with enterprise platform [\$TRAVIS_ENTERPRISE_SECURITY_TOKEN] 
  --travis-queue-name - enterprise platform queue from which to consume jobs [\$TRAVIS_QUEUE_NAME]
  --travis-worker-version - travis-worker version to install (default: latest) [\$TRAVIS_WORKER_VERSION]
  -h / --help - show this help text and exit 0

EOF
}

__assert_trusty() {
  if [[ $(lsb_release -sc) != trusty ]] ; then
    echo 'This should only be run on Ubuntu 14.04'
    exit 1
  fi
}

__assert_root() {
  if [[ $(whoami) != root ]] ; then
    echo 'This should only be run as root'
    exit 1
  fi
}

__install_docker() {
  : ${DOCKER_APT_FILE:=/etc/apt/sources.list.d/docker.list}
  : ${DOCKER_CONFIG_FILE:=/etc/default/docker}

  if [[ ! -f $DOCKER_APT_FILE ]] ; then
    curl -sSL 'https://apt.dockerproject.org/gpg' | apt-key add -
    echo 'deb https://apt.dockerproject.org/repo ubuntu-trusty main' > $DOCKER_APT_FILE
  fi

  apt-get update

  if ! docker version &>/dev/null ; then
    apt-get install -y linux-image-extra-`uname -r` lxc "docker-engine=$DOCKER_VERSION"
  fi

  if [[ $AWS == true ]] ; then
    local docker_mount_point="--graph=/mnt/docker"
  fi

  if [[ ! $(grep icc $DOCKER_CONFIG_FILE) ]] ; then
    echo 'DOCKER_OPTS="-H tcp://0.0.0.0:4243 --storage-driver=aufs --icc=false '$docker_mount_point'"' >> $DOCKER_CONFIG_FILE
    restart docker
    sleep 2
  fi
}

__pull_docker_images() {
  : ${DOCKER_CMD:=docker}
  : ${DOCKER_IMAGE_LANGUAGES:=android erlang go haskell jvm node-js perl php python ruby}
  : ${DOCKER_IMAGE_LANGUAGE_MAPPINGS:=clojure:jvm scala:jvm groovy:jvm java:jvm elixir:erlang node_js:node-js}

  for lang in $DOCKER_IMAGE_LANGUAGES ; do
    $DOCKER_CMD pull quay.io/travisci/travis-$lang:latest
    $DOCKER_CMD tag -f quay.io/travisci/travis-$lang:latest travis:$lang
  done

  $DOCKER_CMD tag -f travis:ruby travis:default

  for lang_map in $DOCKER_IMAGE_LANGUAGE_MAPPINGS ; do
    $DOCKER_CMD tag -f \
      quay.io/travisci/travis-${lang_map%%:*}:latest \
      travis:${lang_map##*:}
  done
}

__install_travis_worker() {
  : ${PACKAGECLOUD_SOURCE:=travisci/worker}

  if [[ ! -f /etc/apt/sources.list.d/travisci_worker.list ]] ; then
    curl -s https://packagecloud.io/install/repositories/${PACKAGECLOUD_SOURCE}/script.deb.sh | bash

    if [[ $TRAVIS_WORKER_VERSION ]] ; then
      apt-get install travis-worker=$TRAVIS_WORKER_VERSION
    else
      apt-get install travis-worker
    fi
  fi
}

__configure_travis_worker() {
  : ${TRAVIS_ENTERPRISE_CONFIG:=/etc/default/travis-enterprise}
  : ${TRAVIS_WORKER_CONFIG:=/etc/default/travis-worker}

  if [[ $TRAVIS_ENTERPRISE_HOST ]] ; then
    sed -i \
      "s/\# export TRAVIS_ENTERPRISE_HOST=\"enterprise.yourhostname.corp\"/export TRAVIS_ENTERPRISE_HOST=\"$TRAVIS_ENTERPRISE_HOST\"/" \
      $TRAVIS_ENTERPRISE_CONFIG
  fi

  if [[ $TRAVIS_ENTERPRISE_SECURITY_TOKEN ]] ; then
    sed -i \
      "s/\# export TRAVIS_ENTERPRISE_SECURITY_TOKEN=\"abcd1234\"/export TRAVIS_ENTERPRISE_SECURITY_TOKEN=\"$TRAVIS_ENTERPRISE_SECURITY_TOKEN\"/" \
      $TRAVIS_ENTERPRISE_CONFIG
  fi

  if [[ $TRAVIS_ENTERPRISE_BUILD_ENDPOINT ]] ; then
    sed -i \
      "s/export TRAVIS_ENTERPRISE_BUILD_ENDPOINT=\"__build__\"/export TRAVIS_ENTERPRISE_BUILD_ENDPOINT=\"$TRAVIS_ENTERPRISE_BUILD_ENDPOINT\"/" \
      $TRAVIS_ENTERPRISE_CONFIG
  fi

  if [[ $TRAVIS_QUEUE_NAME ]] ; then
    sed -i \
      "s/export QUEUE_NAME='builds.linux'/export QUEUE_NAME=\'$TRAVIS_QUEUE_NAME\'/" \
      $TRAVIS_WORKER_CONFIG
  fi
}


__configure_grub() {
  GRUB_CMDLINE_LINUX='cgroup_enable=memory swapaccount=1 apparmor=0'

  if [[ -d /etc/default/grub.d ]] ; then
    cat > "/etc/default/grub.d/99-travis-worker-settings.cfg" <<EOF
GRUB_CMDLINE_LINUX="$GRUB_CMDLINE_LINUX"
EOF
    update-grub
    return
  fi

  GRUB_CFG="/etc/default/grub"
  touch $GRUB_CFG

  if [[ ! $(grep cgroup_enabled $GRUB_CFG) ]] ; then
    sed -i \
      "s/GRUB_CMDLINE_LINUX=\"\"/GRUB_CMDLINE_LINUX=\"$GRUB_CMDLINE_LINUX\"/" \
      $GRUB_CFG
  fi

  update-grub
}

main "$@"
